---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by meng.liu.
--- DateTime: 2021/6/16 9:33 上午
----------------------------------------
--- 实现算法
--- 通过availableTokens存储当前令牌的可用数
--- 通过permittedTokens存储当前已经被令牌的可用数(zset)
--- 当获取令牌时
--- 1、如果令牌不存在则创建令牌
--- 2、如果令牌存在
------ 2.1、根据permittedTokens计算已经过期的令牌数，
------ 2.2、将已经过期的令牌数添加到可用令牌数中
------ 2.3、如果需要获取的令牌数小于等于可用令牌数，则将当前时间戳添加到permittedTokens，可用令牌数减少获取令牌数，然后返回
------ 2.4、如果需要获取的令牌数大于等于可用令牌数，则返回最近一个即将过期的令牌的时长
----------------------------------------
-- 当前时间戳
local currentTimestamp = tonumber(ARGV[1])
-- 申请获取的令牌数
local requestedPermits = tonumber(ARGV[2])
-- 令牌桶的最大令牌数
local maxPermits = tonumber(ARGV[3])
-- 令牌桶的时间范围
local maxTimeRange = tonumber(ARGV[4])
-- 随机值
local randomValue = ARGV[5]
-- 有效令牌数
local availablePermitsName = KEYS[1]
-- 已获取令牌的时间戳信息
local permitsName = KEYS[2]
-- 缓存失效时长
local ttl = math.max(maxTimeRange * 3, 600000)

local availablePermitsVal = tonumber(redis.call('get', availablePermitsName));
-- 数据存在
if availablePermitsVal ~= nil then
    local expiredPermits = redis.call('zrangebyscore', permitsName, 0, currentTimestamp - maxTimeRange)
    local expiredCount = 0;
    for i, permitsInfo in ipairs(expiredPermits) do
        local rVal, perCounts = struct.unpack('fI', permitsInfo)
        expiredCount = expiredCount + perCounts
    end

    if expiredCount > 0 then
        -- 删除所有过期的数据
        redis.call('zrem', permitsName, unpack(expiredPermits))
        availablePermitsVal = availablePermitsVal + expiredCount
        redis.call('set', availablePermitsName, availablePermitsVal)
        redis.call('pexpire', availablePermitsName, ttl)
    end

    if availablePermitsVal < requestedPermits then
        local expiring = redis.call('zrangebyscore', permitsName, '(' .. currentTimestamp - maxTimeRange, currentTimestamp, 'withscores', 'limit', 0, 1)
        return tonumber(expiring[2]) - (currentTimestamp - maxTimeRange)
    else
        redis.call('zadd', permitsName, currentTimestamp, struct.pack('fI', randomValue, requestedPermits))
        redis.call('pexpire', permitsName, ttl)
        redis.call('decrby', availablePermitsName, requestedPermits)
        redis.call('pexpire', availablePermitsName, ttl)
        return nil
    end

else
    -- 初始化数据
    redis.call('set', availablePermitsName, maxPermits)
    redis.call('pexpire', availablePermitsName, ttl)
    -- 添加令牌信息，利用struct.pack进行二进制转换方便还原的时候获取requestedPermits
    redis.call('zadd', permitsName, currentTimestamp, struct.pack('fI', randomValue, requestedPermits))
    redis.call('pexpire', permitsName, ttl)
    redis.call('decrby', availablePermitsName, requestedPermits)
    return nil
end

